(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{221:function(a,t,s){a.exports=s.p+"assets/img/41.c5da3450.png"},256:function(a,t,s){"use strict";s.r(t);var n=s(4),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"nodejs"}},[a._v("NodeJS")]),a._v(" "),n("p",[n("img",{attrs:{src:s(221),alt:"Alt text"}})]),a._v(" "),n("h2",{attrs:{id:"_1-node-简述"}},[a._v("1. Node 简述")]),a._v(" "),n("h3",{attrs:{id:"_1-1-apache-的多线程高并发模式"}},[a._v("1.1 Apache 的多线程高并发模式")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("优点：支持多线程并发\n\n缺点：阻塞\n")])])]),n("h3",{attrs:{id:"_1-2-什么是线程"}},[a._v("1.2 什么是线程")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("线程是可以独立运行的最小的 CPU 单位，可以在同一个进程里并发运行，共享该进程下的内存地址空间。\n\n当不同的线程需要占用同一个变量时，根据先到先得的原则，先到的线程在运作时，\n后来的线程只能在旁边等待，也就是加入到了阻塞排队序列。就造成了线程阻塞。\n")])])]),n("p",[a._v("类似场景：银行柜台办理业务")]),a._v(" "),n("h3",{attrs:{id:"_1-3-nodejs-的异步-i-o-原理"}},[a._v("1.3 NodeJS 的异步 I/O 原理")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("优点：高并发（最重要的优点）、适合 I/O 密集型应用\n\n缺点：\n\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("1.")]),a._v(" 不适合 CPU 密集型应用（CPU 密集型应用给 Node 带来的挑战主要是：\n   由于 JavaScript 单线程的原因，如果有长时间运行的计算（比如大循环）\n   将会导致 CPU 时间片不能释放，使得后续 I/O 无法发起）\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("2.")]),a._v(" 只支持单核 CPU，不能充分利用 CPU\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("3.")]),a._v(" 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃\n\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("-")]),a._v(" 原因：单进程、单线程\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("-")]),a._v(" 解决方案：\n\n（1）Nnigx 反向代理，负载均衡，开多个进程，绑定多个端口；\n（2）开多个进程监听同一个端口，使用 cluster 模块\n（3）线上使用 PM2 管理进程，出现问题自动重启项目\n\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("4.")]),a._v(" Debug 不方便，错误没有 stack trace\n\nNodeJS 基于事件循环，每一条 NodeJS 的逻辑写在回调函数里面，\n回调函数在返回之后异步执行。\n\nNodeJS 不是没有阻塞，而是阻塞不发生在后续回调的流程，\n而会发生在 NodeJS 本身对逻辑的计算和处理。\n\nNodeJS 它的所有 I/O、网络通信等比较耗时的操作，\n都可以交给 worker threads 执行再回调，所以很快。\n但 CPU 的正常操作，它只能自己操作。\n")])])]),n("blockquote",[n("p",[a._v("类似场景：排队点餐后叫号取餐。")])]),a._v(" "),n("h3",{attrs:{id:"_1-4-nodejs-的应用场景"}},[a._v("1.4 NodeJS 的应用场景")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("NodeJS 处理并发的能力强，但处理计算和逻辑的能力反而很弱。\n\n因此，我们把复杂的逻辑运算搬到前端（客户端）完成，而 NodeJS 只需要提供异步 I/O，\n这样就可以实现对高并发的高性能处理。\n")])])]),n("h3",{attrs:{id:"_1-5-restful-api"}},[a._v("1.5 RESTful API")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("这是 NodeJS 最理想的应用场景，可以处理数万条连接，本身没有太多的逻辑，\n只需要请求 API，组织数据进行返回即可。\n\n它本质上只是从某个数据库中查找一些值并将它们组成一个响应。\n\n由于响应是少量文本，入站请求也是少量的文本，因此流量不高，\n一台机器甚至也可以处理最繁忙的公司的 API 需求。\n")])])]),n("h3",{attrs:{id:"_1-6-大量-ajax"}},[a._v("1.6 大量 Ajax")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("实时聊天、客户端逻辑强大的单页 APP，\n具体的例子比如说：\n本地化的在线音乐应用，本地化的在线搜索应用，本地化的在线 APP 等。\n")])])]),n("h3",{attrs:{id:"_1-7-apache-适用场景"}},[a._v("1.7 Apache 适用场景")]),a._v(" "),n("div",{staticClass:"language-md extra-class"},[n("pre",{pre:!0,attrs:{class:"language-md"}},[n("code",[a._v("Apache 由于其多线程高并发共享内存地址空间的特性，\n那就意味着如果服务器足够强大，处理器足够高核，\nApache 的运作将会非常良好，\n所以适用于（并发）异步处理相对较少，后台计算量大，后台业务逻辑复杂的应用程序。\n")])])]),n("blockquote",[n("p",[n("a",{attrs:{href:"alloween.top"}},[a._v("非原创原文链接")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);